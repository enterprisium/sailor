
# ~ Miko ~
# miko.yml
# Miko Configuration (https://mardix.github.io/miko)
#
---

# *required: list/array of all applications to run 
apps:
  - 
    # *required - the name of the application
    name: 
    
    # runtime: python|node|static|shell
    # python for wsgi application (default python)
    # node: for node application, where the command should be ie: 'node inde.js 2>&1 | cat'
    # static: for HTML/Static page and PHP
    # shell: for any script that can be executed via the shell script, ie: command 2>&1 | cat
    runtime: static

    # auto_restart (bool): to force server restarts when deploying
    auto_restart: true

    # static_paths (array): specify list of static path to expose, [/url:path, ...]
    static_paths: 
    
    # SSL issuer: letsencrypt(default)|zerossl
    ssl_issuer: letsencrypt
    
    # threads (int): The total threads to use
    threads: 4

    # wsgi (bool): if runtime is python by default it will use wsgi, if false it will fallback to the command provided
    wsgi: true

    # nginx (object): nginx specific config. can be omitted
    nginx:
      include_file: ''
    
    # uwsgi (object): uwsgi specific config. can be omitted
    uwsgi:
      gevent: false
      asyncio: false

    # env (object) custom environment variable
    env: 
      KEY: VALUE
      KEY2: VALUE2

    # scripts to run during application lifecycle
    scripts:

      # release (array): commands to execute each time the application is released/pushed
      release: 

      # destroy (array): commands to execute when the application is being deleted
      destroy: 

      # predeploy (array): commands to execute before spinning the app
      predeploy:

      # postdeploy (array): commands to execute after spinning the app
      postdeploy: 

    # *required - process - list of all processes to run. 
    # 'web' is special, it’s the only process type that can receive external HTTP traffic 
    # only one web proctype can exist 
    # all other process name will be regular worker. 
    # The name doesn't matter 
    process:
      # == web
      # (dict/object): it’s the only process type that can receive external HTTP traffic
      web: 
        # == cmd(str) - the command to execute
        #-> cmd: app:app (for python using wsgi)
        #-> cmd: node server.js 2>&1 cat (For other web app which requires a server command)
        #-> cmd: /web-root-dir-name (for static html+php)
        cmd: 
        # == server_name(str)
        # the server name without http/https
        server_name: 
        # === workers(int)
        # the number of workers to run, by default 1
        workers: 1
        # === enabled(bool)
        # a boolean to enable/disable this process, by default true
        enabled: true

      # ==
      # other processes (string): command to run, with a name. The name doesn't matter - It can be named anything
      worker1: 
        # == cmd(str) - the command to execute
        cmd:
        # === workers(int)
        # the number of workers to run, by default 1
        workers: 1
        # === available(bool)
        # a boolean to enable/disable this process, by default true
        enabled: true
              
      # == 
      # for simplicity you can pass the command in the name as a string
      # workerX: python script.py
      workerX: 
      
      # == cron
      # Cron proc allows you to run script periodically like cronjob
      # similar to web, only one cron can exist. And it can only have 1 worker
      # Also, put the cron in quotes to prevent deploy error
      # Simple cron expression: 
      # minute [0-59], hour [0-23], day [0-31], month [1-12], weekday [1-7] (starting Monday, no ranges allowed on any field)
      # cron: "* * * * * python cron.py"
      cron: 
